var Node = require('./Node.js');
var letters = require('./letters.json');

/**
 * Factory for creating node
 *
 * @params {Object} a key value pair of words
 */
module.exports = function NodeFactory(wordsHash) {

  /**
   * Gives all words generated by removing one character from the word
   *
   * @private
   * @param {String} word
   */
  var getRemovedWords = function(word) {
    var removedWords = [];
    for (var i = word.length - 1; i >= 0; i--) {
      removedWords.push(word.substr(0, i) + word.substr(i+1));
    }
    return removedWords;
  }

  /**
   * Gives all words generated by replacing one character of the word with a valid letter
   *
   * @private
   * @param {String} word
   */
  var getReplacedWords = function(word) {
    var replacedWords = [];
    for (var i = word.length - 1; i >= 0; i--) {
      for (var j = letters.length - 1; j >= 0; j--) {
        var letter = letters[j];
        var replaced = word.substr(0, i) + letter + word.substr(i+1);
        replacedWords.push(replaced);
      };
    }
    return replacedWords;
  }

  /**
   * Gives all words generated by inserting one character in the word
   *
   * @private
   * @param {String} word
   */
  var getInsertedWords = function(word) {
    var insertedWords = [];
    for (var i = word.length; i >= 0; i--) {
      for (var j = letters.length - 1; j >= 0; j--) {
        var letter = letters[j];
        var inserted = word.substr(0, i) + letter + word.substr(i);
        insertedWords.push(inserted);
      };
    };
    return insertedWords;
  }

  /**
   * Creates a node with all connected nodes
   * 
   * @public
   * @returns {Node}
   */
  this.getNode = function(word) {
    var self = this;
    var node = new Node(word);

    // Get all words which are at distance 1 from word
    var words = getRemovedWords(word).concat(getReplacedWords(word)).concat(getInsertedWords(word));

    // Filter out all the words which are not in the dictionary
    var dictWords = words.filter(function(w) {
      if(wordsHash[w] && w != word) return true;
      return false;
    });

    dictWords.forEach(function(word) {
      node.connect(word);
    });

    return node;
  }
}